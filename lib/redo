# redo bash command history
# Author : Franck Jouvanceau
#
_get_hist()
{
  typeset _hist
  [ "$BASH" ] && {
    _hist="$( (fc -lnr -0 -1000) )" # missing last cmd without subshell on bash <4.4
    [ "$_hist" ] || _hist="$(fc -lnr -1000)" # bug bash <4.4 with multiline last command
  }
  [ "$ZSH_VERSION" ] && _hist=$(printf "\t %s\n" "${history[@]}")
  printf "%s" "$_hist"| awk '
    BEGIN{ done[""]=1 }
    $0 in done {next}
    {done[$0]=1;sub("\n$","");gsub("\n",ret);print $0}
  ' RS="\n*+\t " ret='↵ '  
}

_redo_del()
{
  typeset todel="$1" i _hist
  [ "$todel" ] || return

  # remove from HISTFILE
  awk '{
    if (b) gsub(ret,"\n",todel)
    else gsub(ret, "\\\n",todel)
    while (ind = index($0, todel)) {
      print(substr($0, 1, ind))
      $0 = substr($0, ind+length(todel))
    }
  }1' ret='↵ ' RS='\003' ORS='' b="$BASH" todel="\n${todel//\\/\\\\}\n" "${HISTFILE:=~/.bash_history}" >~/.redo_history.tmp && mv ~/.redo_history.tmp "${HISTFILE:=~/.bash_history}" 

  [ "$BASH" ] && {
    _hist="$( (fc -lr -0 -1000) )" # missing last cmd without subshell on bash <4.4
    [ "$_hist" ] || _hist="$(fc -lr -1000)" # bug bash <4.4 with multiline last command
    for i in $(printf "%s" "$_hist"| awk '
        {sub("\n$","");gsub("\n",ret)}
        $0==todel {gsub("^\n|\t $","",prevrt);print prevrt }
        {prevrt=RT}
      ' RS="\n*[0-9]+\t " ret='↵ ' todel="${todel//\\/\\\\}")
    do
      history -d $i
    done
  }
  # use setopt appendhistory + setopt incappendhistory
  [ "$ZSH_VERSION" ] && builtin fc -p $HISTFILE $HISTSIZE $SAVEHIST #not working in zle call
}

redodel()
{
  tput cuu1 >&2
  selector -p redodel -m 10 -k _redo_key -i "$(_get_hist)"
}

_redo_key()
{
  k="$1" cmd="${_aitems[$_nsel]}"
  case "$k" in
    '[19~'|$'\x04'|'[3~') # F8 Ctl-D delete
      _redo_del "$cmd"
      ;;
  esac
  return 2
}
_redo_selector()
{
  typeset _redo _hist
  [ "$BASH" ] && tput el >&2 && printf "%s" "$1" >&2
  printf "\n" >&2
  _redo="$(selector -p redo -m 10 -k _redo_key -i "$(_get_hist |grep -F -- "$1" 2>/dev/null)" || printf "%s" "$1")"
  printf "%s" "$_redo" | awk '{gsub(ret,"\n")}1' ret='↵ '
  tput cuu1 >&2
}

_redow() {
  BUFFER=$(_redo_selector "$BUFFER")
  #zle reset-prompt
  zle -Rc
  zle end-of-line
  zle vi-insert
}

# Define a function to replace the current word
_redob() {
    READLINE_LINE=$(_redo_selector "$READLINE_LINE")
    READLINE_POINT=${#READLINE_LINE}
}

_redo_binds()
{
  typeset redo_bind
  [ -t 1 ] || return
  [[ ! -o emacs ]] && [[ ! -o vi ]] && set -o emacs
  [ "${BASH_VERSION%%.*}" = 3 ] && {
    bind -m vi-insert '"\C-xr": redraw-current-line'
    bind -m vi-insert '"\C-xx": shell-expand-line'
    bind -m vi-insert '"\C-xk": backward-kill-line'
    bind -m vi-insert '"\C-xs": character-search'
    bind -m vi-insert '"\C-xe": kill-line'
    bind -m vi-insert '"\C-xm": set-mark'
    bind -m vi-insert '"\C-xc": exchange-point-and-mark'
    # safe param quoting (but take only current line until first simple quote)
    # prevent expansion in filter / bell ring
    # - append simple quote to line
    # - add "." begin of line return begin of line
    # - search simple quote
    # - mark position
    # - delete first character "." added
    # - exchange mark
    # - add character "." before simple quote (for kill ring if empty)
    # - cut before simple quote
    # - paste in param, remove last character added
    # - cut end of line
    # - expand line
    bind_redo='\eA'"'"'\eI.\eI\C-xs'"'"'\C-xm\e0xi\C-xc\ei.\C-xk\"$(_redo_selector '"'"'\C-y\C-h'"'"')\"\C-xe\eI\C-xx\eA\C-xr'
    # version not taking parameter from current command line:
    #bind -m vi-insert '"\C-r": "\C-xd$(_redo_selector)\e0i\C-xx\C-xr"'
    bind -m vi-insert '"\C-r": "'"$bind_redo"'"' # ctl r    
    bind -m vi-insert '"\e/": "'"$bind_redo"'"'  # esc /
    bind -m vi-insert '"\e[Z": "'"$bind_redo"'"' # shift tab
    bind -m vi-command '"/": "'"A$bind_redo"'"'  # /
    bind -m vi-command '"\e[Z": "'"A$bind_redo"'"' # shift tab

    bind -m emacs-standard '"\C-xr": redraw-current-line'
    bind -m emacs-standard '"\C-xx": shell-expand-line'
    bind -m emacs-standard '"\C-xk": backward-kill-line'
    bind -m emacs-standard '"\C-xs": character-search'
    #bind -m emacs-standard '"\C-xb": character-search-backward'
    bind -m emacs-standard '"\C-xd": delete-char'
    bind -m emacs-standard '"\C-xm": set-mark'
    bind -m emacs-standard '"\C-xc": exchange-point-and-mark'
    # \C-a beginning-of-line
    # \C-e end-of-line
    # \C-k kill-line
    # safe param quoting (takes only current line until first simple quote)

    bind -m emacs-standard '"\C-r": "\C-e'"'"'\C-a.\C-a\C-xs'"'"'\C-xm\C-a\C-xd\C-xc\C-b.\C-xk$(_redo_selector '"'"'\C-y\C-h'"'"')\C-k\C-a\C-xx\C-e\C-xr"'  
    bind -m emacs-standard '"\ex": "\C-r"'
    bind -m emacs-standard '"\e/": "\C-r"'
    bind -m emacs-standard '"\e[Z": "\C-r"'
    return
  }
  [ "$BASH" ] && {
    bind -m vi-insert -x '"\C-r": _redob' # ctl r
    bind -m vi-insert '"\e/": "\C-r"'  # esc /
    bind -m vi-insert '"\e[Z": "\C-r"' # shift tab
    bind -m vi-command -x '"\C-r": _redob' # ctl r
    bind -m vi-command '"/": "\C-r"'  # esc /
    bind -m vi-command '"\e[Z": "\C-r"' # shift tab
    bind -m emacs-standard -x '"\C-r": _redob' # ctl r
    bind -m emacs-standard '"\e/": "\C-r"'  # esc /
    bind -m emacs-standard '"\e[Z": "\C-r"' # shift tab
    return
  }
  [ "$ZSH_VERSION" ] && {
    zle -N _redow
    # need skip_global_compinit=1 in ~/.zshenv on ubuntu for esc-/ on vicmd map
    bindkey -M vicmd '/' _redow     # /
    bindkey -M vicmd '\e[Z' _redow  # shift tab
    bindkey -M vicmd '^r' _redow    # ctl r
    bindkey -M viins '\e/' _redow   # esc /
    bindkey -M viins '\e[Z' _redow  # shift tab
    bindkey -M viins '^r' _redow    # ctl r
    bindkey -M emacs '\e/' _redow   # esc /
    bindkey -M emacs '^r' _redow    # ctl r
    bindkey -M emacs '\e[Z' _redow  # shift tab
  }
}

_redo_binds

